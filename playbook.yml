- hosts: localhost
  vars:
    state: present
  tasks:
    - name: Service Catalog API Server from CVO - state={{ state }}
      vars:
        name: cluster
        logLevel: Normal
      k8s:
        state: "{{ state }}"
        definition: "{{ lookup('template', 'servicecatalogapiserver.yaml.j2')}}"
      tags: svcat

    - name: Wait for kube-service-catalog
      when: state == 'present'
      action: shell oc api-versions | grep 'servicecatalog.k8s.io'
      register: cmd_result
      until: cmd_result.rc == 0
      retries: 10
      delay: 60
      tags: svcat

    - name: Service Catalog Controller Manager - state={{ state }}
      vars:
        name: cluster
        logLevel: Normal
      k8s:
        state: "{{ state }}"
        definition: "{{ lookup('template', 'servicecatalogcontrollermanager.yaml.j2')}}"
      tags: svcat

    # TODO: Replace this with an install from marketplace
    - name: template-service-broker state={{ state }}
      vars:
        name: templateservicebroker
        namespace: template-service-broker
        source: installed-community-template-service-broker
        source_namespace: template-service-broker
        package_name: templateservicebroker
        starting_csv: templateservicebrokeroperator.v0.2.0
        sub_name: templateservicebroker
        channel: alpha
      k8s:
        state: "{{ state }}"
        definition: "{{ lookup('template', item) | from_yaml }}"
      loop:
        - namespace.yaml.j2
        - subscription.yaml.j2
      loop_control:
        pause: 2
      tags: tsb

    - name: Wait for templateservicebroker
      when: state == 'present'
      action: shell oc get crds | grep 'templateservicebrokers.osb.openshift.io'
      register: cmd_result
      until: cmd_result.rc == 0
      retries: 10
      delay: 60
      tags: tsb

    - name: template-service-broker CR state={{ state }}
      vars:
        kind: TemplateServiceBroker
        name: template-service-broker
        namespace: template-service-broker
      k8s:
        state: "{{ state }}"
        definition: "{{ lookup('template', 'customresource.yaml.j2')}}"
      tags: tsb

    # HACK: Create a ClusterRoleBinding that grants the ASB admin so that it can,
    # in turn, grant APB SAs either admin or edit privileges. This was expected
    # to be supported with OLM, but the current plan is for Marketplace to
    # ship with this specific rule. Until that is implemented and available
    # in marketplace, we need to add the workaround here.
    # TODO: Rip this out once marketplace has support for granting the broker admin.
    - name: ansible-service-broker state={{ state }}
      vars:
        name: ansibleservicebroker
        namespace: ansible-service-broker
        source: installed-community-ansible-service-broker
        source_namespace: ansible-service-broker
        package_name: automationbroker
        starting_csv: automationbrokeroperator.v0.2.0
        sub_name: automationbroker
        channel: alpha
      k8s:
        state: "{{ state }}"
        definition: "{{ lookup('template', item) | from_yaml }}"
      loop:
        - namespace.yaml.j2
        - broker-admin.clusterrolebinding.yaml.j2
        - subscription.yaml.j2
      loop_control:
        pause: 2
      tags: asb

    - name: Wait for automationbroker
      when: state == 'present'
      action: shell oc get crds | grep 'automationbrokers.osb.openshift.io'
      register: cmd_result
      until: cmd_result.rc == 0
      retries: 10
      delay: 60
      tags: asb

    - name: ansible-service-broker CR state={{ state }}
      vars:
        kind: AutomationBroker
        name: ansible-service-broker
        namespace: ansible-service-broker
      k8s:
        state: "{{ state }}"
        definition: "{{ lookup('template', 'customresource.yaml.j2')}}"
      tags: asb
